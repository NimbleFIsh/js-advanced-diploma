import PositionedCharacter from './PositionedCharacter';
import GamePlay from './GamePlay';
import Character from './Character';
import Bowman from './Bowman';
import Swordsman from './Swordsman';
import Magician from './Magician';
import Vampire from './Vampire';
import Undead from './Undead';
import Daemon from './Daemon';
import Team from './Team';
import {generateTeam} from './generators';
import themes from './themes';
import cursors from './cursors';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
  }

  init() {
    this.gamePlay.drawUi(themes.prairie); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è
    this.currentLevel = themes.prairie; // –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è

    this.setEventListenerCellEnter(); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —è—á–µ–π–∫–∏
    this.setEventListenerCellClick(); // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —è—á–µ–π–∫—É

    this.gamePlay.addNewGameListener(() => {
      const allCharaters = [Bowman, Swordsman, Magician, Vampire, Undead, Daemon]; // –≤—Å–µ —Ç–∏–ø—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      this.gamePlay.cells.forEach((item, i) => { // –ü–µ—Ä–µ–±–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        this.gamePlay.deselectCell(i); // –°–Ω—è—Ç—å –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      });
      this.teams = Team.renderTeam(generateTeam([Bowman, Swordsman], 1, 2), generateTeam(allCharaters, 1, 2)); // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
      this.gamePlay.redrawPositions(this.teams.playerTeam.concat(this.teams.computerTeam)); // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    }

      // desert
      // lvlUp + healAllSurvive
      // let playerTeam = generateTeam(allCharaters, 2, 1);
      // let computerTeam = generateTeam(allCharaters, 2, playerTeam.length);

      // arctic
      // lvlUp + healAllSurvive
      // let playerTeam = generateTeam(allCharaters, 2, 2);
      // let computerTeam = generateTeam(allCharaters, 3, playerTeam.length);

      // mountain
      // lvlUp + healAllSurvive
      // let playerTeam = generateTeam(allCharaters, 3, 2);
      // let computerTeam = generateTeam(allCharaters, 4, playerTeam.length);
    );
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
  }

  setEventListenerCellClick() {
    this.gamePlay.addCellClickListener((index) => {
      this.onCellClick(index);
    })
  }

  setEventListenerCellEnter() {
    this.gamePlay.addCellEnterListener((index) => {
      this.onCellEnter(index);
    })
  }

  setEventListenerCellLeave() { // –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
    this.gamePlay.addCellLeaveListener((index) => { // –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
      this.onCellLeave(index); // –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
    })
  }

  levelUp(playerTeam) {
    const levels = ['prairie', 'desert', 'arctic', 'mountain'];
    levels.forEach((lvl, i) => {
      if (this.currentLevel === lvl) {
        if (i === levels.length) {
          // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        } else {
          this.currentLevel = levels[i + 1];
          playerTeam.forEach((person) => {
            heal(person);
            attackAfter(person);
          });
        }
      }
    });
  }

  heal(character) {
    if ((character.health + 80) < 100) {
      character.health += 80;
    } else {
      character.health = 100;
    }
  }

  currentPersonage() { // –°—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    let info = {};
    info.selected = false;
    this.gamePlay.cells.forEach((item, i) => {
      if (item.classList.contains('selected')) {
        info.selected = true;
        info.ID = i;
        this.teams.playerTeam.forEach((el) => {
          if (el.position === i) {
            info.personage = el.character;
          }
        });
      }
    });
    return info;
  }

  readCharasters() { // –°—á–∏—Ç—ã–≤–∞–µ—Ç this.teams –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ
    let info = [];
    for (let i = 0; i < Object.keys(this.teams).length; i++) {
      for (let f = 0; f < this.teams[Object.keys(this.teams)[i]].length; f++) {
        info.push({
          'command': Object.keys(this.teams)[i],
          'position': this.teams[Object.keys(this.teams)[i]][f].position,
          'character': this.teams[Object.keys(this.teams)[i]][f].character
        });
      }
    }
    return info;
  }

  personageCellEnterInfo(index) { // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä –º—ã—à–∏
    return this.readCharasters().filter((s) => {
      return s.position === index;
    })[0];
  }

  cellIsNotEmpty(index) { // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ –∫–ª–µ—Ç–∫–∞
    return this.gamePlay.cells[index].childElementCount !== 0;
  }

  checkEmptyCellTitle(index) { // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏ title –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ
    if (this.gamePlay.cells[index].title !== '') { // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∏—Ç—Å—è —Ç–∞–∫, —á—Ç–æ —É –ø—É—Å—Ç–æ–π —è—á–µ–π–∫–∏ –µ—Å—Ç—å title
      this.gamePlay.cells[index].removeAttribute('title'); // –£–¥–∞–ª–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç title
    }
  }

  setCursor(cursour) { // –Ω–µ–±–æ–ª—å—à–æ–µ API –¥–ª—è —ç—Å—Ç–µ—Ç–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä
    this.gamePlay.setCursor(cursors[cursour]);
  }

  deselectAllCellColor(color = 'yellow') {
    for (let i = 0; i < this.gamePlay.cells.length; i++) {
      if (this.gamePlay.cells[i].classList.contains('selected-' + color)) {
        this.gamePlay.cells[i].classList.remove('selected');
        this.gamePlay.cells[i].classList.remove('selected-' + color);
      }
    }
  }

  attackAfter(character) {
    character.attack = Math.max(character.attack, character.attack * (1.8 - character.health) / 100);
  }

  onCellClick(index) {
    let currentPersonage = this.currentPersonage(), // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        characters = this.readCharasters(); // –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏

    if (currentPersonage.selected && currentPersonage.ID === index) { // –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
      this.gamePlay.deselectCell(index);
      return 0;
    }

    if (this.cellIsNotEmpty(index)) { // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
      if (currentPersonage.selected) { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
        for (let i = 0; i < characters.length; i++) { // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          if (characters[i].position === index) { // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞–∂–∞—Ç–æ–π —è—á–µ–π–∫–∏
            if (characters[i].command === 'playerTeam') { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞
              this.deselectAllCellColor();
              this.gamePlay.selectCell(index);
            } else { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
              // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏
                // –ê—Ç–∞–∫–∞
            }
          }
        }
      } else { // –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω
        for (let i = 0; i < characters.length; i++) { // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          if (characters[i].position === index) { // –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤ –¥–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–µ
            if (characters[i].command === 'playerTeam') { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç—å –∏–≥—Ä–æ–∫—É
              this.deselectAllCellColor();
              this.gamePlay.selectCell(index); // –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            } else {
              GamePlay.showError('–≠—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞!'); // –û—à–∏–±–∫–∞ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–≥—Ä–æ–∫—É
              break; // –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
            }
          }
        }
      }
    } else { // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞
      if (currentPersonage.selected) { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω
        let team = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        characters.forEach((item, i) => { // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
          if (item.position === currentPersonage.ID) { // –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            team.push(new PositionedCharacter(currentPersonage.personage, index));
            this.checkEmptyCellTitle(item.position); // –£–¥–∞–ª–µ–Ω–∏–µ title —Å —Å—Ç–∞—Ä–æ–π —è—á–µ–π–∫–∏
            this.gamePlay.showCellTooltip(`üéñ${item.character.level} ‚öî${item.character.attack} üõ°${item.character.defence} ‚ù§${item.character.health}`, index); // –°–æ–∑–¥–∞–Ω–∏–µ title —É –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏
            this.teams[item.command].forEach((el) => { // –ü–µ—Ä–µ–±–æ—Ä –∫–æ–º–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—â—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
              el.position = index; // –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å –∫–æ–º–º–∞–Ω–¥, —á—Ç–æ —Å–æ–≤–µ—Ä–µ—à–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            });
          } else {
            team.push(new PositionedCharacter(item.character, item.position));
          }
        });
        this.deselectAllCellColor();
        console.log(team);
        this.gamePlay.redrawPositions(team); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      }
    }
  }

  onCellEnter(index) {
    let currentPersonage = this.currentPersonage(); // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–∫—É—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    if (this.cellIsNotEmpty(index)) { // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
      if (currentPersonage.selected) { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω
        if (this.personageCellEnterInfo(index).command === 'playerTeam') { // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ —Å–æ—é–∑–Ω–∏–∫–æ–º
          this.deselectAllCellColor('red');
          this.deselectAllCellColor('green');
          this.setCursor('pointer');
        } else if (this.personageCellEnterInfo(index).command === 'computerTeam') { // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –∞—Ç–∞–∫–∏
          if (true) { // –í –∑–æ–Ω–µ –∞—Ç–∞–∫–∏ (–ø–æ–∫–∞ –∑–∞–≥—Ä—É—à–∫–∞)
            this.deselectAllCellColor('green');
            this.deselectAllCellColor('red');
            this.setCursor('crosshair');
            this.gamePlay.selectCell(index, 'red');
          } else { // –í–Ω–µ –∑–æ–Ω—ã –∞—Ç–∞–∫–∏
            this.deselectAllCellColor('red');
            this.deselectAllCellColor('green');
            this.setCursor('notallowed');
          }
        } else { // –ò–Ω–∞—á–µ –∂–µ, –ø—É—Å—Ç–æ—Ç–∞
          this.deselectAllCellColor('red');
          this.deselectAllCellColor('green');
          this.setCursor('auto');
        }
      } else { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤—ã–±—Ä–∞–Ω
        let personageData = this.personageCellEnterInfo(index); // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        this.gamePlay.showCellTooltip(`üéñ ${personageData.character.level} ‚öî ${personageData.character.attack} üõ° ${personageData.character.defence} ‚ù§ ${personageData.character.health}`, index); // –°–æ–∑–¥–∞–Ω–∏–µ title –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –∞—Ç–∞–∫–∏/–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      //             let layer = 0;
      //             for (let i = -item.character.range*2; i <= item.character.range*2; i++) {
      //               for (let r = 0; r < item.character.range; r++) {
      //                 console.log(selectedPID + '%8-(' + (i) + ')+(8*' + layer / 2 + ') ~ ' + (selectedPID % 8 - (i) + (8 * layer / 2)));
      //               }
      //               layer++;
      //             }
      //             // pos -range ... range
      //             // layer 2 * range
      //             // selectedPID % 8 - (pos) + (8 * layer)

    } else { // –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ –ø—É—Å—Ç–∞
      this.checkEmptyCellTitle(index);
      if (currentPersonage.selected) { // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤—ã–±—Ä–∞–Ω
        this.deselectAllCellColor('red');
        this.deselectAllCellColor('green');
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if (true) { // –í –∑–æ–Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥—Ä—É—à–∫–∞)
          this.setCursor('pointer');
          this.gamePlay.selectCell(index, 'green');
        }
      }
    }
  }

  onCellLeave(index) {// –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
    console.log(index); // –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏
  }
}
